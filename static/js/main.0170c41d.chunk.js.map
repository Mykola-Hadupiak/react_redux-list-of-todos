{"version":3,"sources":["types/Filter.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filter","actions","todo","type","payload","currentTodoReducer","state","action","search","filterReducer","query","status","list","todosReducer","concat","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","filterQuery","filterStatus","dispatch","filterTodosByStatus","useMemo","todosCopy","COMPLETED","completed","ACTIVE","todosForRender","title","toLowerCase","includes","className","map","id","color","onClick","ActionCurrentTodo","selectTodo","TodoFilter","useState","ALL","option","setOption","setSearch","value","onChange","event","target","FilterActions","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","response","ok","json","reject","Error","Loader","TodoModal","user","setUser","useEffect","userId","error","href","email","name","App","isLoading","setIsLoading","selectedTodo","a","TodosDispatch","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0170c41d.chunk.js","sourcesContent":["export enum Filter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetStatusAction = { type: 'STATUS/SET', payload: string };\ntype SetQueryAction = { type: 'QUERY/SET', payload: string };\n\nconst setStatus = (type: string): SetStatusAction => (\n  { type: 'STATUS/SET', payload: type }\n);\nconst setQuery = (search: string): SetQueryAction => (\n  { type: 'QUERY/SET', payload: search }\n);\n\ntype Action = SetStatusAction | SetQueryAction;\n\nexport const actions = { setStatus, setQuery };\n\ntype State = {\n  query: string,\n  status: string,\n};\n\nconst filterReducer = (\n  state: State = { query: '', status: 'all' },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'QUERY/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'STATUS/SET':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodosActions = { type: 'TODOS/SET', payload: Todo[] };\n\nconst addTodos = (list: Todo[]): AddTodosActions => (\n  { type: 'TODOS/SET', payload: list }\n);\n\nexport const actions = { addTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: AddTodosActions,\n): Todo[] => {\n  switch (action.type) {\n    case 'TODOS/SET':\n      return state.concat(action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useMemo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { Filter } from '../../types/Filter';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as ActionCurrentTodo } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const filterQuery = useAppSelector(state => state.filter.query);\n  const filterStatus = useAppSelector(state => state.filter.status);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n\n  const filterTodosByStatus = useMemo(() => {\n    const todosCopy = [...todos];\n\n    switch (filterStatus) {\n      case Filter.COMPLETED: {\n        return todosCopy.filter(({ completed }) => completed);\n      }\n\n      case Filter.ACTIVE: {\n        return todos.filter(({ completed }) => !completed);\n      }\n\n      default:\n        return todosCopy;\n    }\n  }, [filterStatus]);\n\n  const todosForRender = useMemo(() => {\n    const todosCopy = [...filterTodosByStatus];\n\n    if (filterQuery) {\n      return todosCopy.filter((todo: Todo) => todo.title.toLowerCase()\n        .includes(filterQuery.toLowerCase()));\n    }\n\n    return todosCopy;\n  }, [filterQuery, filterTodosByStatus]);\n\n  const selectTodo = (todo: Todo) => {\n    if (todo === currentTodo) {\n      dispatch(ActionCurrentTodo.removeTodo());\n    } else {\n      dispatch(ActionCurrentTodo.setTodo(todo));\n    }\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todosForRender.map((todo: Todo) => {\n          const { id, title, completed } = todo;\n          const color = completed ? 'success' : 'danger';\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n              {completed ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              ) : (\n                <td className=\"is-vcentered\" />\n              )}\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={`has-text-${color}`}>\n                  {title}\n                </p>\n              </td>\n              {currentTodo?.id === id ? (\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                </td>\n              ) : (\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => selectTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Filter } from '../../types/Filter';\nimport { actions as FilterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const [option, setOption] = useState<string>(Filter.ALL);\n  const [search, setSearch] = useState('');\n  const dispatch = useAppDispatch();\n  const filterQuery = useAppSelector(state => state.filter.query);\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setOption(value);\n\n    dispatch(FilterActions.setStatus(value));\n  };\n\n  const onChangeSearchHandler = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { value } = event.target;\n\n    setSearch(value);\n    dispatch(FilterActions.setQuery(value));\n  };\n\n  const clearSearch = () => {\n    setSearch('');\n    dispatch(FilterActions.setQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <div className=\"control\">\n        <div className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={option}\n            onChange={onChangeHandler}\n          >\n            <option value={Filter.ALL}>\n              All\n            </option>\n            <option value={Filter.ACTIVE}>\n              Active\n            </option>\n            <option value={Filter.COMPLETED}>\n              Completed\n            </option>\n          </select>\n        </div>\n      </div>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={search}\n          onChange={onChangeSearchHandler}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {filterQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearSearch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(new Error(`${response.status}`));\n      }\n\n      return response.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as ActionCurrentTodo } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User>();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    try {\n      if (currentTodo?.userId) {\n        getUser(currentTodo.userId)\n          .then(setUser);\n      }\n    } catch (error) {\n      throw new Error(`User: ${currentTodo?.userId} not found. Error: ${error}`);\n    }\n  }, [currentTodo]);\n\n  if (!currentTodo) {\n    return (\n      <p>No todo found</p>\n    );\n  }\n\n  const close = () => {\n    dispatch(ActionCurrentTodo.removeTodo());\n  };\n\n  const {\n    id,\n    completed,\n    title,\n  } = currentTodo;\n\n  const color = completed ? 'success' : 'danger';\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={close}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={`has-text-${color}`}>\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : <Loader />}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as TodosDispatch } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    (async () => {\n      const todos = await getTodos();\n\n      dispatch(TodosDispatch.addTodos(todos));\n      setIsLoading(false);\n    })();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}